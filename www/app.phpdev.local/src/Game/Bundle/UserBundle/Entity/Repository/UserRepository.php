<?php
/**
 * Created by PhpStorm.
 * User: ab
 * Date: 23.06.2014
 * Time: 12:30
 */

namespace Game\Bundle\UserBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	/**
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllQuery()
	{
		$query = $this->createQueryBuilder('i');

		return $query->getQuery();
	}
  
      
public function getUsersFromProject($project)
  {
  $user_table = array();
  
  $manager_id = $project->getManager()->getId();
  
  $user_table[] = 1;//admin
  $user_table[] = $manager_id;
  
  $qb = $this->createQueryBuilder('u')
			->innerJoin('u.projects', 'p')
      ->andWhere('p.id=?1')
      ->setParameter('1', $project->getId())
    ->getQuery()
    ;

  $users = $qb->getResult(); 
    
  foreach ($users as $user ) 
    {
    $id = $user->getId();
   
    $user_table[] = $id;
    }
   
  return $user_table;  
  }

public function getPossibleUserToProjectsQuery($user_table,$subordinates_ids)
	{  
  		$qb = $this->createQueryBuilder('u')
			->andWhere('u.id not in (?1)')      
      ->setParameter('1', $user_table)
      ->andWhere('u.id in (?2)')
			->setParameter('2', $subordinates_ids);
    ;  
  return $qb;
  }
  
  
	public function getUserProjectsOnlyQuery($user,$project)
	{
  $user_table = $this->getUsersFromProject($project);  
  
  $manager = $project->getManager();
  $subordinates_ids = $this->getUserSubordinates($manager);
  
  $possible_users =  $this->getPossibleUserToProjectsQuery($user_table,$subordinates_ids);
		
  return $possible_users;  
 	}


	public function getUserSubordinatesIds($userId)
	{
		$qb = $this->createQueryBuilder('u')
			->select('u.id')
		    ->leftJoin('u.parent', 'parent')
			->andWhere('parent.id=?1')
			->setParameter('1', $userId);

		$users = $qb->getQuery()->getArrayResult();
		$ids = array();

		foreach ($users as $user) {
			$ids[] = $user['id'];

			$ids2 = $this->getUserSubordinatesIds($user['id']);

			if (is_array($ids2)) {
				$ids = array_merge($ids, $ids2);
			}
		}

		return $ids;
	}

	public function getUserSubordinates($user) {
		$ids = $this->getUserSubordinatesIds($user->getId());

		$ids = array_unique($ids);

		$qb = $this->createQueryBuilder('u')
			->andWhere('u.id in (?1)')
			->setParameter('1', $ids);

		return $qb->getQuery()->execute();
	}
        
        public function getUsersToFilterOption($userId){
            $qb = $this->createQueryBuilder('u')
                    ->where('u.id != ?1')
                    ->setParameter('1', $userId)
                    ->getQuery();
                    
            return $qb->getResult();
        } 
        
        
      
}
